(TOPIC) table 1 : topic_id and topic_name (parent table)
(RANKING )table 2 : id, topic id and ranking (child table)

CREATE TEMP TABLE IF NOT EXISTS topic (
	topic_id SERIAL PRIMARY KEY,
	topic_name VARCHAR(255) UNIQUE NOT NULL,
	created_on TIMESTAMP NOT NULL,
);

CREATE 


// works
CREATE TABLE IF NOT EXISTS topic (
	topic_id SERIAL PRIMARY KEY,
	topic_name VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS ranking (
	ranking_id SERIAL PRIMARY KEY,
	rank INT NOT NULL CHECK(1<=rank AND rank<=100),
	topic_id INTEGER,
	CONSTRAINT fk_ranking_topic FOREIGN KEY(topic_id) REFERENCES topic(topic_id)
);

// this works too
CREATE TABLE IF NOT EXISTS ranking (
	ranking_id SERIAL PRIMARY KEY,
	rank INT NOT NULL CHECK(1<=rank AND rank<=100),
	topic_id INTEGER REFERENCES topic(topic_id) ON DELETE CASCADE
);

// works
const readRanking = `
SELECT * FROM ranking
INNER JOIN topic
	ON topic.topic_id = ranking.topic_id
`;

const readTopic = `
SELECT * 
FROM topic
JOIN ranking
	ON ranking.topic_id = topic.topic_id
`;


['topic_name', rank_int]
WITH INSERTED AS (
	INSERT INTO topic(topic_name) VALUES ($1)
	ON CONFLICT DO NOTHING
	RETURNING topic_id
)
INSERT INTO ranking(rank, topic_id) 
VALUES (
	$2,
	COALESCE(
		(SELECT topic_id FROM INSERTED),
		(SELECT topic_id FROM topic WHERE topic_name=$1)
	)
);




with inserted as (
    insert into states(name) values ('Texas')
    on conflict do nothing
    returning state_id
)
insert into cities(name, state_id)
values (
    'Dallas', 
    coalesce(
        (select state_id from inserted),
        (select state_id from states where name = 'Texas')
    )
);

CREATE TABLE states (
  state_id serial primary key,
  name text
);
CREATE TABLE cities (
  city_id serial,
  name text,
  state_id int references states(state_id)
);


////////////////////////////////////////////////////////////////////////
const createTopicTable = `
      CREATE TABLE IF NOT EXISTS topic (
        topic_id SERIAL PRIMARY KEY,
        topic_name VARCHAR(255) UNIQUE NOT NULL
      );
    `;

		const createRankingTable = `
      CREATE TABLE IF NOT EXISTS ranking (
        ranking_id SERIAL PRIMARY KEY,
        rank INT NOT NULL CHECK(1<=rank AND rank<=100),
        topic_id INTEGER REFERENCES topic(topic_id) ON DELETE CASCADE
      );
    `;

////////////////////////////////////////////////////////////////////////

    // INSERT TOPIC
    // const insertTopic = `
    //   INSERT INTO topic(topic_name) VALUES ($1);
    // `;
    // const res3 = await dbQuery(insertTopic, ['topic_1']);
    // if (res3.ok) {
    //   console.log(res3.result?.rows);
    // } else {
    //   console.log(res3.error);
    // }

    // const insertRanking = `
    //   INSERT INTO ranking(rank, topic_id) VALUES ($1, $2);
    // `;
    // const res4 = await dbQuery(insertRanking, [10, 1]);
    // if (res4.ok) {
    //   console.log(res4.result?.rows);
    // } else {
    //   console.log(res4.error);
    // }

    // READ QUERY
    // const readTopic = `
    //   SELECT * FROM ranking
    //   INNER JOIN topic
    //     ON topic.topic_id = ranking.topic_id
    // `;
    // const readTopic = `
    //   SELECT *
    //   FROM topic
    //   JOIN ranking
    //     ON ranking.topic_id = topic.topic_id
    // `;
    // const res5 = await dbQuery(readTopic);
    // if (res5.ok) {
    //   console.log(res5.result?.rows);
    // } else {
    //   console.log(res5.error);
    // }

    // const insertText = `
    //   WITH INSERTED AS (
    //     INSERT INTO topic(title) VALUES ($1)
    //     ON CONFLICT DO NOTHING
    //     RETURNING id
    //   )
    //   INSERT INTO ranking(rank, topic_id)
    //   VALUES (
    //     $2,
    //     COALESCE(
    //       (SELECT id FROM INSERTED),
    //       (SELECT id FROM topic WHERE title=$1)
    //     )
    //   );
    // `;
    const insertText = `
      BEGIN;
      INSERT INTO topic(title) VALUES ($1);
      INSERT INTO ranking(rank, topic_id) 
        VALUES($2, (SELECT id FROM topic WHERE title=$1));
      COMMIT;
    `;
    // const res4 = await dbQuery(insertText, ['dfda', 18]);
    // if (res4.ok) {
    //   console.log(res4.result?.rows);
    // } else {
    //   console.log(res4.error);
    // }

////////////////////////////////////////////////////////////////////////
